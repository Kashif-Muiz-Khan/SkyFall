@using SkyFall.Context
@using System.ComponentModel.DataAnnotations
@using SkyFall.Model
@inject HabitProvider HabitProvider
@inject NavigationManager NavigationManager

<EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-lg-12 col-6 mt-2">
            <div class="card h-100">
                <div class="card-body bg-light d-flex flex-column">
                    <h4 class="card-title">Habit details</h4>

                    <div class="form-group mb-2">
                        <label for="name">Name</label>
                        <InputText id="name" class="form-control" @bind-Value="@Model.Name" placeholder="Name" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.Name)" />
                        </div>
                    </div>
                    <div class="form-group mb-2">
                        <label for="type">Type</label>
                        <InputText id="type" class="form-control" @bind-Value="@Model.Type" placeholder="Type" />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.Type)" />
                        </div>
                    </div>
                    <div class="form-group mb-2">
                        <label for="description">Description</label>
                        <InputTextArea id="description" class="form-control" @bind-Value="@Model.Description" rows="5" placeholder="Add a description..." />
                        <div class="small">
                            <ValidationMessage For="@(() => Model.Description)" />
                        </div>
                    </div>
                    <div class="form-group mb-2">
                        <label for="point">Point</label>
                        <div class="input-group">
                            <span class="input-group-text">*</span>
                            <InputNumber id="point" class="form-control" @bind-Value="@Model.Point" placeholder="5" min="1" max="10000" step="1" />
                            <div class="small">
                                <ValidationMessage For="@(() => Model.Point)" />
                            </div>
                        </div>
                    </div>
                    <div class="mt-auto">
                        <button type="submit" class="btn btn-outline-primary w-100"> @(Habit is null ? "Add habit" : "Update habit")</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Habit? Habit { get; set; }

    private HabitModel Model { get; set; }

    protected override void OnParametersSet()
    {
        Model = Habit is null ? new HabitModel() : new HabitModel(Habit);
        base.OnParametersSet();
    }

    private async Task HandleSubmit()
    {
        var habit = Habit ?? new Habit();

        habit.Description = Model.Description;
        habit.Name = Model.Name;
        habit.Point = Model.Point;
        habit.Type = Model.Type;

        if (habit.Id == 0)
        {
            await HabitProvider.AddHabitAsync(habit);
            Model = new HabitModel();
        }
        else
        {
            await HabitProvider.UpdateHabitAsync(habit);
        }

        NavigationManager.NavigateTo("/");
    }

    private sealed class HabitModel
    {
        [Required(ErrorMessage = "Please enter the name of the habit.")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Please enter the type of the habit.")]
        public string Type { get; set; } = "";

        [Required(ErrorMessage = "Please enter the description of the habit.")]
        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Please enter the point value of the habit.")]
        public int Point { get; set; }

        public HabitModel() { }

        public HabitModel(Habit habit)
        {
            Name = habit.Name;
            Type = habit.Type;
            Description = habit.Description;
            Point = habit.Point;
        }
    }
}
